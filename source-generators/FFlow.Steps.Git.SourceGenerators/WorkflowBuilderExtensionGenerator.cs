namespace FFlow.Steps.Git.SourceGenerators;

using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

[Generator]
public class WorkflowBuilderExtensionGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx =>
            ctx.AddSource("GitStepAttribute.g.cs", SourceText.From(SourceGenerationHelper.MarkerAttribute, Encoding.UTF8)));

        var stepClasses = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (s, _) => IsGitStepType(s),
                transform: static (ctx, _) => GetGitStepType(ctx))
            .Where(static x => x is not null);

        context.RegisterSourceOutput(stepClasses, static (spc, stepType) =>
        {
            var source = GenerateExtensions((GitStepType)stepType!);
            spc.AddSource($"{((GitStepType)stepType!).StepName}Extensions.g.cs", SourceText.From(source, Encoding.UTF8));
        });
    }

    private static bool IsGitStepType(SyntaxNode node)
        => node is ClassDeclarationSyntax cds &&
           cds.AttributeLists.SelectMany(x => x.Attributes).Any(attr => attr.Name.ToString() == "GitStep");

    private static GitStepType? GetGitStepType(GeneratorSyntaxContext context)
    {
        if (context.Node is not ClassDeclarationSyntax classDecl)
            return null;

        var name = classDecl.Identifier.Text;

        var attr = classDecl.AttributeLists.SelectMany(al => al.Attributes)
            .FirstOrDefault(a => a.Name.ToString() == "GitStep");

        if (attr == null) return null;

        // Retrieve parameter/property name from attribute args if any
        string? stringParam = null;
        string? stringProperty = null;

        if (attr.ArgumentList is { Arguments.Count: >= 2 })
        {
            stringParam = attr.ArgumentList.Arguments[0].ToString().Trim('"');
            stringProperty = attr.ArgumentList.Arguments[1].ToString().Trim('"');
        }

        return new GitStepType(name, stringParam, stringProperty);
    }

    private static string GenerateExtensions(GitStepType step)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("using FFlow.Core;");
        sb.AppendLine("namespace FFlow.Steps.Git;");
        sb.AppendLine();
        sb.AppendLine("public static partial class WorkflowBuilderBaseExtensions");
        sb.AppendLine("{");

        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// Adds a <see cref=\"{step.StepClass}\"/> to the workflow and allows configuration via delegate.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("/// <param name=\"builder\">The workflow builder.</param>");
        sb.AppendLine($"/// <param name=\"configure\">An action to configure the <see cref=\"{step.StepClass}\"/>.</param>");
        sb.AppendLine("/// <returns>The step builder for further configuration.</returns>");
        sb.AppendLine($"public static WorkflowBuilderBase {step.MethodName}(this WorkflowBuilderBase builder,");
        sb.AppendLine($"    Action<{step.StepClass}> configure)");
        sb.AppendLine("{");
        sb.AppendLine($"    var step = new {step.StepClass}();");
        sb.AppendLine("    configure?.Invoke(step);");
        sb.AppendLine("    builder.AddStep(step);");
        sb.AppendLine("    return builder;");
        sb.AppendLine("}");


        if (!string.IsNullOrEmpty(step.StringParam) && !string.IsNullOrEmpty(step.StringProperty))
        {
            sb.AppendLine("/// <summary>");
            sb.AppendLine($"/// Adds a <see cref=\"{step.StepClass}\"/> to the workflow for the specified <paramref name=\"{step.StringParam}\"/>,");
            sb.AppendLine("/// and allows optional configuration via delegate.");
            sb.AppendLine("/// </summary>");
            sb.AppendLine("/// <param name=\"builder\">The workflow builder.</param>");
            sb.AppendLine($"/// <param name=\"{step.StringParam}\">The {step.StringParam} value.</param>");
            sb.AppendLine($"/// <param name=\"configure\">An optional action to configure the <see cref=\"{step.StepClass}\"/>.</param>");
            sb.AppendLine("/// <returns>The step builder for further configuration.</returns>");
            sb.AppendLine($"/// <exception cref=\"ArgumentException\">Thrown if <paramref name=\"{step.StringParam}\"/> is null or empty.</exception>");
            sb.AppendLine($"public static WorkflowBuilderBase {step.MethodName}(this WorkflowBuilderBase builder, string {step.StringParam},");
            sb.AppendLine($"    Action<{step.StepClass}>? configure = null)");
            sb.AppendLine("{");
            sb.AppendLine($"    if (string.IsNullOrEmpty({step.StringParam}))");
            sb.AppendLine($"        throw new ArgumentException(\"Value cannot be null or empty.\", nameof({step.StringParam}));");
            sb.AppendLine();
            sb.AppendLine($"    var step = new {step.StepClass} {{ {step.StringProperty} = {step.StringParam} }};");
            sb.AppendLine("    configure?.Invoke(step);");
            sb.AppendLine("    builder.AddStep(step);");
            sb.AppendLine("    return builder;");
            sb.AppendLine("}");
        }

        sb.AppendLine("}");
        return sb.ToString();
    }
}
