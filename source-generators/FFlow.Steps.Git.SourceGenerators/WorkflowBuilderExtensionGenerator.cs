namespace FFlow.Steps.Git.SourceGenerators;

using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

[Generator]
public class WorkflowBuilderExtensionGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx =>
            ctx.AddSource("GitStepAttribute.g.cs",
                SourceText.From(SourceGenerationHelper.MarkerAttribute, Encoding.UTF8)));

        var stepClasses = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (s, _) => IsGitStepType(s),
                transform: static (ctx, _) => GetGitStepType(ctx))
            .Where(static x => x is not null);

        context.RegisterSourceOutput(stepClasses, static (spc, stepType) =>
        {
            var source = GenerateExtensions((GitStepType)stepType!);
            spc.AddSource($"{((GitStepType)stepType!).StepName}Extensions.g.cs",
                SourceText.From(source, Encoding.UTF8));
        });
    }

    private static bool IsGitStepType(SyntaxNode node)
        => node is ClassDeclarationSyntax cds &&
           cds.AttributeLists.SelectMany(x => x.Attributes).Any(attr => attr.Name.ToString() == "GitStep");

    private static GitStepType? GetGitStepType(GeneratorSyntaxContext context)
    {
        if (context.Node is not ClassDeclarationSyntax classDecl)
            return null;

        var name = classDecl.Identifier.Text;

        var attrs = classDecl.AttributeLists
            .SelectMany(al => al.Attributes)
            .Where(a => a.Name.ToString() == "GitStep");

        var allPairs = new List<(string Param, string Property)[]>();

        foreach (var attr in attrs)
        {
            var paramPropertyPairs = new List<(string Param, string Property)>();

            if (attr.ArgumentList != null && attr.ArgumentList.Arguments.Count >= 2)
            {
                var args = attr.ArgumentList.Arguments;
                for (int i = 0; i < args.Count; i += 2)
                {
                    var param = args[i].ToString().Trim('"');
                    var prop = (i + 1 < args.Count) ? args[i + 1].ToString().Trim('"') : null;
                    if (prop != null)
                        paramPropertyPairs.Add((param, prop));
                }
            }

            if (paramPropertyPairs.Count > 0)
                allPairs.Add(paramPropertyPairs.ToArray());
        }

        return new GitStepType(name, allPairs.ToArray());
    }




    private static string GenerateExtensions(GitStepType step)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("using FFlow.Core;");
        sb.AppendLine("namespace FFlow.Steps.Git;");
        sb.AppendLine();
        sb.AppendLine("public static partial class WorkflowBuilderBaseExtensions");
        sb.AppendLine("{");

        sb.AppendLine("/// <summary>");
        sb.AppendLine(
            $"/// Adds a <see cref=\"{step.StepClass}\"/> to the workflow and allows configuration via delegate.");
        sb.AppendLine("/// </summary>");
        sb.AppendLine("/// <param name=\"builder\">The workflow builder.</param>");
        sb.AppendLine(
            $"/// <param name=\"configure\">An action to configure the <see cref=\"{step.StepClass}\"/>.</param>");
        sb.AppendLine("/// <returns>The step builder for further configuration.</returns>");
        sb.AppendLine($"public static WorkflowBuilderBase {step.MethodName}(this WorkflowBuilderBase builder,");
        sb.AppendLine($"    Action<{step.StepClass}> configure)");
        sb.AppendLine("{");
        sb.AppendLine($"    var step = new {step.StepClass}();");
        sb.AppendLine("    configure?.Invoke(step);");
        sb.AppendLine("    builder.AddStep(step);");
        sb.AppendLine("    return builder;");
        sb.AppendLine("}");


        foreach (var pair in step.ParamPropertyPairsByAttribute)
        {
            sb.AppendLine("/// <summary>");
            sb.AppendLine($"/// Adds a <see cref=\"{step.StepClass}\"/> to the workflow for the specified parameters,");
            sb.AppendLine("/// and allows optional configuration via delegate.");
            sb.AppendLine("/// </summary>");
            sb.AppendLine("/// <param name=\"builder\">The workflow builder.</param>");

            foreach (var (param, _) in pair)
            {
                sb.AppendLine($"/// <param name=\"{param}\">The {param} value.</param>");
            }

            sb.AppendLine("/// <param name=\"configure\">An optional action to configure the step.</param>");
            sb.AppendLine("/// <returns>The step builder for further configuration.</returns>");

            foreach (var (param, _) in pair)
            {
                sb.AppendLine(
                    $"/// <exception cref=\"ArgumentException\">Thrown if <paramref name=\"{param}\"/> is null or empty.</exception>");
            }

            // Method signature
            sb.Append("public static WorkflowBuilderBase ");
            sb.Append(step.MethodName);
            sb.Append("(this WorkflowBuilderBase builder");

            foreach (var (param, _) in pair)
            {
                sb.Append($", string {param}");
            }

            sb.AppendLine($", Action<{step.StepClass}>? configure = null)");
            sb.AppendLine("{");

            foreach (var (param, _) in pair)
            {
                sb.AppendLine($"    if (string.IsNullOrEmpty({param}))");
                sb.AppendLine($"        throw new ArgumentException(\"Value cannot be null or empty.\", nameof({param}));");
                sb.AppendLine();
            }

            // Instantiate step and assign properties
            sb.AppendLine($"    var step = new {step.StepClass} {{");
            foreach (var (param, prop) in pair)
            {
                sb.AppendLine($"        {prop} = {param},");
            }

            sb.AppendLine("    };");

            sb.AppendLine("    configure?.Invoke(step);");
            sb.AppendLine("    builder.AddStep(step);");
            sb.AppendLine("    return builder;");
            sb.AppendLine("}");
        }


        sb.AppendLine("}");
        return sb.ToString();
    }
}